{"version":3,"sources":["components/Graphics/index.js","components/Controls/index.js","components/Infobar/index.js","components/HelpText/index.js","components/Linalg/index.js","mathUtils.js","gl/build/frag.js","gl/index.js","gl/build/vert.js","App.js","serviceWorker.js","index.js"],"names":["handleMouseMove","e","setX","width","height","pos","undefined","nativeEvent","targetTouches","touches","pageX","pageY","idx","Math","floor","window","innerWidth","innerHeight","baseOffset","round","Tooltip","x","N","className","square","minus","Graphics","base","setHighlighted","useState","X","faded","setFaded","useEffect","setTimeout","id","onMouseMove","onTouchMove","plus","autosieve","Controls","state","setN","sieve","setHighlight","setCellSize","linalgOpen","Nstr","error","helper","textState","setTextState","value","cellTextState","setCellTextState","doAutosieve","console","log","TextField","placeholder","onChange","v","parseInt","isNaN","length","bigInt","handleTextChange","target","autoFocus","fullWidth","style","marginLeft","disabled","helperText","type","s","handleCellChange","Button","textTransform","whiteSpace","onClick","variant","color","onMouseOver","onMouseLeave","marginRight","p","Checkbox","checked","htmlFor","Entry","name","Infobar","relations","factorBase","onFinish","shift","done","HelpText","onClose","open","setOpen","handleClose","stopPropagation","argmin","arr","max","min","out","i","ixor","a","b","nullSpace","mat","k","pivots","map","row","indexOf","filter","pivotSet","Set","j","count","has","output","push","completeFactorization","reducedMat","matrix","cols","rows","slice","temp","rowReduce","nullity","nullVec","times","mod","abs","expvecB","entry","factor","pow","neq","Linalg","result","setResult","setError","y","maxRelations","bad","r","xx","yy","lt","eq","curr","divide","matT","prunedFactorBase","prunedMat","includes","computeMatrix","l","gcd","q","toString","legendre","modPow","MAX","Array","fill","sqrt","primeList","gl","currentState","nextState","framebuffer","program","pass","highlight","highlightMod","highlightAlt","logSqrtN","delta","prime","residue","uniforms","createShader","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createTexture","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","initializeTexture","texImage2D","RGBA","UNSIGNED_BYTE","uniform2f","resolution","setState","uniform1f","initGL","canvas","document","getElementById","getContext","vert","VERTEX_SHADER","frag","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getProgramInfoLog","deleteProgram","positionAttr","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","Float32Array","STATIC_DRAW","createScreen","createFramebuffer","Object","entries","key","getUniformLocation","createUniforms","handleResize","viewport","updateSieve","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","drawArrays","TRIANGLES","renderSieve","getSieve","qr","z","add","c","t","m","t2","modSqrt","res","highlightOff","setGLUniform","App","rawSetN","setBase","pIdx","setP","cellSize","setRelations","openLinalg","setOpenLinalg","n","leq","L","R","M","isqrt","sqrtN","initSieve","ceil","preventDefault","highlightResidues","t1","suppressRender","shouldRender","data","Uint8Array","readPixels","getRelations","addEventListener","passive","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c4c072d2.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport {InlineMath} from 'react-katex';\n\nimport './index.css';\n\n\nfunction handleMouseMove(e, setX, width, height) {\n    e = e.nativeEvent;\n\n    let pos = null;\n    if (e.targetTouches !== undefined) {\n        const touches = e.targetTouches;\n        pos = [touches[0].pageX, touches[0].pageY];\n    } else {\n        pos = [e.pageX, e.pageY];\n    }\n\n    const idx = [\n        Math.floor(pos[0]/window.innerWidth * width),\n        Math.floor((1-pos[1]/window.innerHeight) * height)\n    ];\n    const baseOffset = Math.round(width * height/2);\n    setX(idx[1] * width + idx[0] - baseOffset);\n}\n\nfunction Tooltip({x, N}) {\n    return <div className='tooltip'>\n        <InlineMath>{`x = ${x}`}</InlineMath>\n        <InlineMath>{`x^2 - N = ${x.square().minus(N)}`}</InlineMath>\n    </div>\n}\n\nfunction Graphics({width, height, base, N, setHighlighted}) {\n    const [X, setX] = useState(null);\n    const [faded, setFaded] = useState(false);\n\n    useEffect(() => {\n        if (X !== null) {\n            setHighlighted(X);\n            setFaded(false);\n            setTimeout(() => {setFaded(true);}, 3000);\n        }\n    }, [X, setHighlighted]);\n\n    return <>\n        <div className='loading'>Loading...</div>\n        <canvas\n            id='canvas'\n            width={width} height={height}\n            onMouseMove={(e) => handleMouseMove(e, setX, width, height)}\n            onTouchMove={(e) => handleMouseMove(e, setX, width, height)}\n        />\n        {X === null ? null : <Tooltip x={base.plus(X)} N={N} faded={faded}/>}\n        <style>{`\n            .tooltip {\n               opacity: ${faded ? 0 : 1};\n               transition: ${faded ? 2 : 0.1}s opacity ease-out;\n            }\n        `}</style>\n    </>;\n}\n\nexport default Graphics;\n","import React, {useState, useEffect} from 'react';\n\nimport bigInt from 'big-integer';\n\nimport {InlineMath} from 'react-katex';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport './index.css';\n\n\nfunction handleTextChange(v, setN, setTextState) {\n    const value = parseInt(v);\n    if (value > 0 & !isNaN(v) & !isNaN(value)) {\n        if (v.length > 30) {\n            setTextState({Nstr: v, error: false, helper: 'Might take too long to factor'});\n        } else {\n            setTextState({Nstr: v, error: false, helper: ' '});\n        }\n        setN(bigInt(v));\n    } else {\n        setTextState({Nstr: v, error: true, helper: 'Must be a positive integer'});\n    }\n}\n\n\n// Outside of React state system to avoid issues with setTimeout\nlet autosieve = false;\n\nfunction Controls({state, setN, sieve, setHighlight, setCellSize, linalgOpen}) {\n    // These initial values must be updated in App.js as well.\n    const [textState, setTextState] = useState({\n        Nstr: '853972440679',\n        error: false,\n        helper: ' ',\n    });\n    const [cellTextState, setCellTextState] = useState({\n        value: '30',\n        error: false\n    });\n\n    function doAutosieve() {\n        if (linalgOpen) {autosieve = false;}\n        if (!autosieve) {return;}\n        setTimeout(() => sieve(true), 1);\n        console.log('autosieve', autosieve);\n    }\n\n    useEffect(doAutosieve, [state]);\n\n    function handleCellChange(s) {\n        const value = parseInt(s);\n        if (value > 0 & value <= 300) {\n            setCellSize(s);\n            setCellTextState({value: s, error: false});\n        } else {\n            setCellTextState({value: s, error: true});\n        }\n    }\n\n\n    return <div id='controls'>\n        <div className='input-wrapper'>\n            <div className='N'>\n            <InlineMath>N =</InlineMath>\n            </div>\n            <TextField\n                id='number-input'\n                placeholder='Enter an integer to factor'\n                error={textState.error}\n                value={textState.Nstr}\n                onChange={e => handleTextChange(e.target.value, setN, setTextState)}\n                autoFocus\n                fullWidth\n                style={{marginLeft:10}}\n                disabled={autosieve}\n                helperText={textState.helper}\n            />\n            <div className='cell-size'>\n            <TextField\n                type='number' \n                helperText='Cell Size'\n                value={cellTextState.value}\n                onChange={(e) => handleCellChange(e.target.value, setCellTextState)}\n                error={cellTextState.error}\n                disabled={autosieve}\n            />\n            </div>\n        </div>\n        <div className='sieve-wrapper'>\n            <Button\n                style={{textTransform: 'none', whiteSpace: 'nowrap'}}\n                onClick={() => sieve(false)}\n                variant='contained'\n                color='primary'\n                onMouseOver={() => setHighlight(window.innerWidth > 600)}\n                onMouseLeave={() => setHighlight(false)}\n                disabled={autosieve}\n            >\n                <span style={{marginRight: 5}}>Sieve</span>\n                <InlineMath>{`p = ${state.p}`}</InlineMath>\n            </Button>\n            <div className='checkbox-wrapper'>\n            <Checkbox\n                id='autosieve' color='primary'\n                checked={autosieve}\n                onChange={(e) => {autosieve = e.target.checked; sieve(); doAutosieve(sieve);}}\n            />\n                <label htmlFor='autosieve' style={{marginLeft: -5, marginRight: 10}}>Auto sieve</label>\n            </div>\n        </div>\n    </div>\n}\n\nexport default Controls;\n","import React  from 'react';\nimport Button from '@material-ui/core/Button';\nimport './index.css';\n\n\nfunction Entry({name, value}) {\n    return <div className='entry'>\n        <p className='name'>{name}</p>\n        <div className='value'>\n            {value}\n        </div>\n    </div>\n}\n\nconst safetyMargin = 5;\n\nfunction Infobar({relations, factorBase, base, shift, onFinish}) {\n    const done = relations.length > factorBase.length + safetyMargin;\n\n    return <div className='info-bar'>\n        <Entry name='Relations Needed' value={factorBase.length + 1 + safetyMargin}/>\n        <Entry name='Relations Found' value={relations.length}/>\n        <div className='finish'>\n            <Button disabled={!done} onClick={onFinish} variant='outlined'>Complete Factorization</Button>\n            {done ? null : <p className='warning'>Not enough relations! Sieve for longer, or decrease the cell size.</p>}\n        </div>\n        <div className='entry footer'>\n            <p className='caption'>\n                {'Made with <3 by Samuel J. Li'}</p>\n        </div>\n    </div>;\n}\n\nexport default Infobar;\n","import React, {useState} from 'react';\nimport {InlineMath} from 'react-katex';\nimport {IoIosCalculator as Icon} from 'react-icons/io';\nimport './index.css';\n\nfunction HelpText({onClose}) {\n    const [open, setOpen] = useState(true);\n\n    function handleClose() {\n        setOpen(false);\n        onClose();\n    }\n\n    return <>\n        <div \n           className={'help-container ' + (open ? 'open' : 'closed')}\n           onClick={handleClose}\n        >\n        <div className='help-text' onClick={(e) => e.stopPropagation()}>\n            <div className='header'>\n                <span className='icon'><Icon/></span>\n                <div className='title'>\n                    Quadratic Sieve\n                    <p className='subtitle'>Made with {'<3'} by Samuel J. Li</p>\n                </div>\n            </div>\n            <div className='help-content'>\n            The <b>quadratic sieve</b> is the second-fastest known method for factoring large integers. This is an interactive visualization of the sieving step in this algorithm.\n\n            <ul>\n                <li>Each square represents the output of the polynomial <InlineMath>x^2 - n</InlineMath> evaluated at a positive integer. Larger values are brighter.</li>\n                <li>During the sieving step, these outputs are divided by small primes, where possible. The pattern of divisibility by each prime is very regular, making this step quite efficient.</li>\n                <li>Values that reduce to 1 after the sieving step are <i>smooth</i>, and highlighted in red.</li>\n            </ul>\n            By collecting enough smooth numbers,\n            we can find a subcollection whose product is a square.\n            This can be done efficiently with linear algebra.\n\n            <p>This gives us two different integers <InlineMath>x, y</InlineMath> whose squares are equal modulo <InlineMath>n</InlineMath>. With high probability, the identity <InlineMath>x^2 - y^2 = (x+y) \\, (x-y)</InlineMath> then yields a factor of <InlineMath>n</InlineMath>.</p>\n            </div>\n\n            <button onClick={handleClose}>Got it!</button>\n            \n        </div></div>\n    </>\n}\n\nexport default HelpText;\n","import React, {useState, useEffect} from 'react';\nimport {InlineMath, BlockMath} from 'react-katex';\n\nimport bigInt from 'big-integer';\nimport './index.css';\n\n\n\n/*\n * This component implements the linear algebra step.\n * It constructs the matrix of exponent vectors for each relation,\n * verifies the relations, and then computes the nullspace\n * via Gaussian elimination over GF(2).\n */\n\n\n// Finds index of smallest nonnegative entry.\nfunction argmin(arr, max) {\n    let min = max;\n    let out = null;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 0 & arr[i] < min) {\n            min = arr[i];\n            out = i;\n        }\n    }\n    return out;\n}\n\n// In-place xor array a by array b.\nfunction ixor(a, b) {\n    for (let i = 0; i < a.length; i++) {\n        a[i] ^= b[i];\n    }\n}\n\n// Computes row-reduced echelon form (RREF) of a matrix over GF(2).\nfunction rowReduce(mat) {\n    // Copy matrix\n    const matrix = [];\n    for (let row of mat) {\n        matrix.push([...row]);\n    }\n\n    const cols = matrix[0].length;\n\n    // Gaussian elimination\n    const rows = matrix.length;\n    for (let i = 0; i < rows; i++) {\n        const pivots = matrix.slice(i).map(row => row.indexOf(1));\n        let target = argmin(pivots, cols);\n        if (target === null) {break;}\n        const j = pivots[target];\n        target += i;\n\n        console.log(target, j);\n\n        // Eliminate other rows\n        for (let k = 0; k < rows; k++) {\n            if (k !== target & matrix[k][j]) {\n                ixor(matrix[k], matrix[target]);\n            }\n        }\n\n        // Swap to ith position\n        let temp = matrix[i];\n        matrix[i] = matrix[target];\n        matrix[target] = temp;\n    }\n\n    return matrix;\n}\n\n// Computes kth vector in basis of null-space of a matrix (assumed to be in RREF).\nfunction nullSpace(mat, k) {\n    const pivots = mat.map(row => row.indexOf(1)).filter(i => i >= 0);\n    const pivotSet = new Set(pivots);\n\n    // Find first non-pivot column (guaranteed to exist)\n    let j = 0;\n    let count = 0;\n    for (; j < mat[0].length; j++) {\n        if (!pivotSet.has(j)) {count++;}\n        if (count > k) {break;}\n    }\n    const output = [j];\n\n    // Find all pivot columns including i\n    for (let i = 0; i < mat.length; i++) {\n        if (mat[i][j] === 1) {\n            output.push(pivots[i]);\n        }\n    }\n    return output;\n}\n\n// Computes the binary matrix of exponent vectors\n// given a list of relations. \n// Also verifies that each relation is actually\n// smooth over the factor base.\nfunction computeMatrix(relations, factorBase, N, base) {\n    const x = []; // Polynomial inputs\n    const y = []; // Polynomial outputs\n    const mat = []; // Matrix of exponent vectors\n\n    const maxRelations = factorBase.length + 64; // Discard unnecessary relations\n\n    let bad = 0;\n    for (let r of relations) {\n        const xx = base.plus(r);\n        const yy = xx.times(xx).minus(N);\n\n        // Construct exponent vector\n        const row = [yy.lt(0) ? 1 : 0];\n        for (let p of factorBase.slice(1)) {\n            row.push(yy.mod(p).eq(0) ? 1 : 0);\n        }\n\n        // Verify relation\n        let curr = yy;\n        for (let j = 0; j < row.length; j++) {\n            if (row[j]) {\n                curr = curr.divide(factorBase[j]);\n            }\n        }\n        if (curr.eq(1)) {\n            x.push(xx);\n            y.push(yy);\n            mat.push(row);\n        } else {\n            bad++;\n        }\n\n        if (x.length >= maxRelations) {break;}\n    }\n\n    // Take the transpose\n    let matT = [];\n    for (let j = 0; j < mat[0].length; j++) {\n        const row = [];\n        for (let i = 0; i < mat.length; i++) {\n            row.push(mat[i][j]);\n        }\n        matT.push(row);\n    }\n\n    // Prune out unused factor base primes (from failed relations)\n    let prunedFactorBase = [];\n    let prunedMat = [];\n    for (let i = 0; i < matT.length; i++) {\n        if (matT[i].includes(1)) {\n            prunedFactorBase.push(factorBase[i]);\n            prunedMat.push(matT[i]);\n        }\n    }\n    if (prunedMat.length >= prunedMat[0].length) {\n        return {bad};\n    }\n\n    return {x, y, mat: prunedMat, prunedFactorBase};\n}\n\n// Assemble relations into a square\n// until the resulting factorization is nontrivial.\n//\n// a is the product of several x values.\n//\n// b is the product of several y values,\n// chosen such that b is the square of some\n// integer s.\n//\n// Since y = x^2 (mod N), it follows that a^2 = s^2 mod N,\n// as desired.\nfunction completeFactorization(x, mat, N, factorBase) {\n    const reducedMat = rowReduce(mat);\n    const nullity = mat[0].length - mat.length;\n\n    for (let i = 0; i < nullity; i++) {\n        // Compute null space vector\n        const nullVec = nullSpace(reducedMat, i);\n        console.log('Nullspace vector ', i, ': ', nullVec);\n\n        // Construct product of appropriate x\n        console.log('Constructing a...');\n        let a = bigInt(1);\n        for (let i of nullVec) {\n            a = a.times(x[i]).mod(N);\n        }\n        a = a.abs();\n\n        // Construct exponent vector for b\n        console.log('Constructing b...');\n        const expvecB = [];\n        for (let i = 0; i < mat.length; i++) {\n            let entry = 0;\n            let row = mat[i];\n            for (let j of nullVec) {\n                entry += row[j];\n            }\n            expvecB.push(entry/2);\n        }\n        console.log('factorBase', factorBase)\n        console.log('bExpVec', expvecB);\n\n        // Construct b\n        let b = bigInt(1);\n        for (let i = 1; i < expvecB.length; i++) {\n            if (expvecB[i] === 0) {continue;}\n            const factor = bigInt(factorBase[i]).pow(expvecB[i]);\n            b = b.times(factor).mod(N);\n        }\n\n        console.log('a', a, 'b', b);\n        if (a.neq(b) & a.plus(b).neq(N)) {\n            return [a, b, nullVec.length];\n        }\n    }\n    return [null, null];\n}\n\n\nfunction Linalg({open, handleClose, relations, factorBase, N, base}) {\n    const [result, setResult] = useState(null);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        if (!open) {setResult(null); setError(false); return;}\n        setTimeout(() => {\n            const {x, y, mat, bad, prunedFactorBase} = computeMatrix(relations, factorBase, N, base);\n            if (mat === undefined) {\n                setError(<>\n                    <p>{`Too many (${bad}) relations failed verification. Continue sieving.`}</p>\n                    <p>This might also happen if the cell size is too small on desktop.</p>\n                </>);\n                return;\n            }\n            const [a, b, l] = completeFactorization(x, mat, N, prunedFactorBase);\n\n            if (a == null) {\n                setError(<>\n                    <p>Failed to find a nontrivial factor! Are you sure the number is composite?</p>\n                    <p>The sieve may also fail if <InlineMath>N</InlineMath> is even or a square.</p>\n                </>);\n            } else {\n                let p = bigInt.gcd(a.plus(b), N);\n                let q = N.divide(p);\n                setResult({length: l, a, b, p, q});\n            }\n        }, 50);\n    }, [open, relations, factorBase, N, base]);\n\n    return <>\n        <div \n           className={'linalg-container ' + (open? 'open' : 'closed')}\n            onClick={handleClose}\n        >\n        <div className='linalg-text' onClick={(e) => e.stopPropagation()}>\n\n            {error ||\n                (result === null ? 'Constructing square congruence (may take a while)...' : <>\n                    Combining {result.length} of the relations gives the congruence\n                    <BlockMath>{`${result.a.toString()}^2`}</BlockMath>\n                    <BlockMath>{`\\\\equiv ${result.b.toString()}^2 \\\\, (\\\\mathrm{mod}\\\\, N),`}</BlockMath>\n                    which produces the nontrivial factorization\n                    <BlockMath>{`N = ${result.p} \\\\times ${result.q}.`}</BlockMath>\n                </>)\n            }\n\n            <button onClick={handleClose}>Close</button>\n            \n        </div></div>\n    </>\n}\n\nexport default Linalg;\n","import bigInt from 'big-integer';\n\nfunction legendre(a, p) {\n    return a.modPow((p-1)/2, p);\n}\n\n// Computes square root modulo p.\nfunction modSqrt(a, p) {\n    console.log('modSqrt', a, p);\n    if (p === 2) {return a;}\n    if (a.eq(0)) {return 0;}\n\n    // First check Legendre symbol\n    if (legendre(a, p).eq(p-1)) {\n        console.log('Not a QR');\n        return undefined;\n    }\n\n    // Tonelli-Shanks algorithm\n    let q = p-1;\n    let s = 0;\n    while (q % 2 === 0) {\n        q /= 2;\n        s += 1\n    }\n\n    if (s === 1) {\n        return a.modPow((p+1)/4, p);\n    }\n    let z = bigInt(2);\n    for (; z.lt(p); z = z.add(1)) {\n        if (legendre(z, p).eq(p-1)) {break;}\n    }\n\n    let c = z.modPow(q, p);\n    let r = a.modPow((q+1)/2, p);\n    let t = a.modPow(q, p);\n\n    let m = s;\n    let t2 = 0;\n    while ((t-1) % p !== 0) {\n        console.log(t);\n        t2 = (t*t) % p;\n\n        let i = 1;\n        for (i = 1; i < m; i++) {\n            if ((t2-1) % p === 0) {break;}\n            t2 = (t2 * t2) % p\n        }\n\n        let b = c.modPow(1 << (m-i-1), p);\n        r = r.times(b).mod(p);\n        c = b.times(b).mod(p);\n        t = (t * c) % p;\n        m = i;\n    }\n    return r;\n}\n\nfunction isqrt(n) {\n    if (n.leq(2)) { return n; }\n\n    let L = bigInt(0);\n    let R = n.plus(1);\n\n    while (R.minus(L).neq(1)) {\n        let M = L.plus(R).divide(2);\n        if (M.times(M).leq(n)) {\n            L = M;\n        } else {\n            R = M;\n        }\n    }\n    return L;\n}\n\n\n// Generate primes up to MAX\nconst MAX = 1000000;\nconst sieve = new Array(MAX).fill(true);\n\nsieve[0] = false;\nsieve[1] = false;\nfor (let i=2; i < Math.sqrt(MAX); i++) {\n    if (sieve[i]) {\n        for (let j = i*i; j < MAX; j+= i) {\n                sieve[j] = false;\n        }\n    }\n}\n\nconst primeList = [];\nfor (let i=2; i < MAX; i++) {\n\tif (sieve[i]) {primeList.push(i);}\n}\n\nexport {primeList, isqrt, modSqrt};\n","export default `\nprecision highp float;\n\nuniform sampler2D u_prev;\nuniform vec2 u_resolution;\nuniform float u_highlight;\nuniform float u_highlightMod;\nuniform float u_highlightAlt;\n\nuniform float u_logSqrtN; // sqrt(N)\nuniform float u_delta; // x_0 - sqrt(N)\nuniform float u_baseOffset; // Index offset of x_0 from start of grid\n\nuniform float u_prime;\nuniform float u_residue;\n\nuniform float u_pass;\nvarying vec2 v_texCoord;\n\nconst float MAX_VALUE = 100.; // Maximum range of representable floats\n\n\nfloat decode(vec4 v) {\n    v *= 255.0;\n    float decoded = (v.x + (v.y + (v.z + v.w/256.0)/256.0)/256.0)/256.0;\n    return MAX_VALUE * decoded - 0.01; // Remap from [0, 1]\n}\n\nvec4 encode(float value) {\n    value = (value + 0.01) / MAX_VALUE; // Remap to [0, 1]\n\n    vec4 encoded = vec4(0.0, 0.0, 0.0, 0.0);\n    for (int i = 0; i < 4; i++) {\n        value *= 255.9999;\n        float pixel = floor(value);\n        value = fract(value);\n        encoded[i] = pixel/255.0;\n    }\n    // To account for rounding bias\n    encoded[3] += value/255.0;\n    return encoded;\n}\n\nvoid main() {\n    // Render Passes\n    // 0: Initialize sieve\n    // 1: Compute sieved result\n    // 2: Convert to brightness for display.\n    float value = decode(texture2D(u_prev, v_texCoord));\n\n    // Get number at this location\n    vec2 xy_loc = v_texCoord * u_resolution - 0.5;\n    float loc = floor(dot(xy_loc, vec2(1., u_resolution.x)) + 0.5) - u_baseOffset;\n\n    if (u_pass < 0.5) {\n        // Initialize sieve with value log(abs(x*x-n)).\n        float x_red = loc + u_delta; // x - sqrt(N)\n\n        float ratio = 0.5 * x_red * exp(-u_logSqrtN);\n        float correction = log(abs(1. + ratio));\n        float log_polyOut = log(abs(x_red)) + log(2.) + u_logSqrtN + correction;\n        gl_FragColor = encode(log_polyOut);\n        return;\n\n        // Equivalent but less numerically stable\n//        float polyOut = x * (2. * u_sqrtN + x);\n//        gl_FragColor = encode(log(abs(polyOut)));\n    }\n\n    if (u_pass < 1.5) {\n        // Sieve by provided prime and residue\n        float congClass = mod(loc - u_residue + 0.5, u_prime) - 0.5;\n        value -= log(u_prime) * clamp(1.-congClass, 0., 1.);\n        gl_FragColor = encode(value);\n        return;\n    }\n\n    // Cell highlighting\n    float alpha = 1.;\n    vec3 color;\n\n    float residue = loc;\n    if (u_highlightMod > 0.) {\n        residue = mod(residue+0.5, u_highlightMod) - 0.5;\n    }\n    float highlight_delta = loc - u_highlight;\n    bool highlight = min(abs(residue - u_highlight), abs(residue - u_highlightAlt)) < 1e-3;\n\n    // Display normal view if not highlighted\n    if (value < 0.6) {\n        color = vec3(1., 0., 0.);\n        alpha = 0.98;\n    } else {\n        color = vec3(value, value, value)/50.;\n    }\n\n    // Highlight cells\n    if (highlight) {\n        if (u_highlightMod == 0.) {\n            color = vec3(0.4, 0.6, 0.9);\n        } else {\n            color = vec3(1., 1., 1.) * (value - log(u_highlightMod))/50.;\n        }\n    }\n\n    gl_FragColor = vec4(color, alpha);\n    return;\n}\n`;\n","import fragmentShader from './build/frag.js';\nimport vertexShader from './build/vert.js';\n\nlet gl = null;\n\n\n// Textures for current and next simulation state\nlet currentState = null;\nlet nextState = null;\n\nlet framebuffer = null;\nlet program = null;\n\n// Hyperparameters of simulation\nlet state = {\n    pass: 0, // Render pass\n    baseOffset: 0, // Index offset of x_0 from start of grid\n    highlight: 0.5, // Index of square to highlight\n    highlightMod: 0, // Highlight modulo p\n    highlightAlt: 0.5, // Second residue class to highlight (optional)\n\n    logSqrtN: 0,\n    delta: 0, // x_0 - sqrt(N)\n\n    prime: 0, // which p to sieve by\n    residue: 0, // residue mod p to sieve\n};\n\n// Location of GLSL uniforms.\n// Will be initialized based on state.\nlet uniforms = {};\n\n\n// GLSL Initialization Functions\nfunction createShader(type, source) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {return shader;}\n\n    // Log failure\n    console.error(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n}\n\nfunction createProgram() {\n    let vert = createShader(gl.VERTEX_SHADER, vertexShader);\n    let frag = createShader(gl.FRAGMENT_SHADER, fragmentShader);\n\n    program = gl.createProgram();\n    gl.attachShader(program, vert);\n    gl.attachShader(program, frag);\n    gl.linkProgram(program);\n\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {gl.useProgram(program);}\n\n    // Log failure\n    console.error(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n}\n\nfunction createScreen() {\n    // Initialize vertex position buffers\n    let positionAttr = gl.getAttribLocation(program, 'a_position');\n    let positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    gl.enableVertexAttribArray(positionAttr);\n    gl.vertexAttribPointer(positionAttr, 2, gl.FLOAT, false, 0, 0);\n\n    // Create two triangles covering entire canvas\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n        -1, -1, 1, -1, -1, 1,\n        -1, 1, 1, -1, 1, 1\n    ]), gl.STATIC_DRAW);\n}\n\nfunction createTexture() {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Initialize texture settings\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    return texture;\n}\n\n\nfunction createUniforms() {\n    // Initialize float uniforms\n    for (let [key, value] of Object.entries(state)) {\n        uniforms[key] = gl.getUniformLocation(program, 'u_' + key);\n        gl.uniform1f(uniforms[key], value);\n    }\n\n    // Initialize resolution uniform\n    uniforms.resolution = gl.getUniformLocation(program, 'u_resolution');\n}\n\n\n\n// GLSL Update Functions\nfunction initializeTexture(texture, width, height) {\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    console.log('Initializing texture', width, height);\n    gl.texImage2D(\n        gl.TEXTURE_2D, 0, gl.RGBA,\n        width, height, 0,\n        gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.uniform2f(uniforms.resolution, width, height);\n}\n\nfunction setState(name, value) {\n    state[name] = value;\n    gl.uniform1f(uniforms[name], value);\n}\n\n\n\n\n// Main initialization function\nfunction initGL() {\n    if (gl !== null) {return;}\n\n    // Get WebGL context\n    const canvas = document.getElementById('canvas');\n    gl = canvas.getContext('webgl');\n\n    // Initialize program\n    createProgram();\n    createScreen();\n\n    nextState = createTexture();\n    currentState = createTexture();\n\n    framebuffer = gl.createFramebuffer();\n\n    createUniforms();\n\n    handleResize(gl.canvas.width, gl.canvas.height);\n}\n\nfunction handleResize(width, height) {\n    initializeTexture(currentState, width, height);\n    initializeTexture(nextState, width, height);\n    setState('baseOffset', Math.round(width * height / 2));\n    gl.viewport(0, 0, width, height);\n}\n\nfunction initSieve(N, base) {\n    // Initialize sieve parameters\n    const sqrtN = Math.sqrt(N);\n    const delta = base.times(base).minus(N) / (base + sqrtN); // Numerically stable computation of base - sqrt(N)\n    setState('logSqrtN', Math.log(sqrtN));\n    setState('delta', delta);\n\n    // Render to texture\n    setState('pass', 0);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D, currentState, 0\n    );\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    renderSieve();\n}\n\nfunction updateSieve(residue, prime) {\n    console.log('Sieving positions', residue, 'mod', prime);\n\n    // Render to texture\n    setState('pass', 1);\n    setState('prime', prime);\n    setState('residue', residue);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.bindTexture(gl.TEXTURE_2D, currentState);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D, nextState, 0\n    );\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // Swap textures\n    let temp = currentState;\n    currentState = nextState;\n    nextState = temp;\n}\n\nfunction renderSieve() {\n    // Render to screen\n    setState('pass', 2);\n    gl.bindTexture(gl.TEXTURE_2D, currentState);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n}\n\nfunction getRelations() {\n    renderSieve();\n\n    const {baseOffset} = state;\n    const {width, height} = gl.canvas;\n    const data = new Uint8Array(4*width*height);\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);\n\n    console.log(width*height, baseOffset);\n\n    const relations = [];\n    for (let i = 0; i < width*height; i++) {\n        if (data[4*i+3] < 255) {\n            relations.push(i - baseOffset);\n        }\n    }\n    return relations;\n}\n\nexport {initGL, initSieve, updateSieve, renderSieve, setState, handleResize, getRelations};\n","export default `\nattribute vec2 a_position;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n    v_texCoord = (a_position + 1.0) / 2.0;\n    gl_Position = vec4(a_position, 0, 1);\n}\n`;\n","import React, {useState, useEffect} from 'react';\nimport bigInt from 'big-integer';\n\nimport Graphics from './components/Graphics';\nimport Controls from './components/Controls';\nimport Infobar from './components/Infobar';\nimport HelpText from './components/HelpText';\nimport Linalg from './components/Linalg';\n\nimport 'katex/dist/katex.min.css';\n\nimport {modSqrt, primeList, isqrt} from './mathUtils';\nimport {\n    initGL, initSieve,\n    updateSieve, renderSieve,\n    setState as setGLUniform,\n    handleResize,\n    getRelations\n} from './gl';\n\nimport './App.css';\n\n\n/*\n * Explanation of parameters\n *\n *\n * N: The number to factor.\n * p: The current prime being sieved.\n * pIdx: The index of the current prime being sieved (in the list of all primes).\n * base: The center of the range of x to sieve. Also referred to as x_0 throughout the code.\n * cellSize: The size of one sieving cell, in quarter-pixels.\n * relations: The list of x for which x^2-N is smooth.\n *\n *\n *\n */\n\n\n\n\n\n// Get residue classes to sieve\nfunction getSieve(N, p, base) {\n    const qr = modSqrt(N.mod(p), p);\n    const res = base.mod(p);\n\n    if (qr !== undefined) {\n        const t1 = ((qr - res) % p + p) % p;\n        const t2 = ((-qr - res) % p + p) % p;\n        return [t1, t2];\n    }\n\n    return [null, null];\n}\n\n// Utilities for cell highlighting in the UI\nfunction highlightOff() {\n    setGLUniform('highlight', 0.5);\n    setGLUniform('highlightAlt', 0.5);\n    setGLUniform('highlightMod', 0);\n    renderSieve();\n}\n\nfunction setHighlighted(x) {\n    setGLUniform('highlight', x);\n    setGLUniform('highlightAlt', x);\n    setGLUniform('highlightMod', 0);\n    renderSieve();\n}\n\n\n\n// Width/height of sieving region, in cells\nlet width = 1;\nlet height = 1;\n\n// Initialize factor base\nlet factorBase = [-1];\n\n\n// Main app\nfunction App() {\n    const [N, rawSetN] = useState(bigInt(0)); // Number to factor\n    const [base, setBase] = useState(bigInt(0)); // Number to factor\n    const [pIdx, setP] = useState(0); // Index of current prime to sieve\n    \n    const [cellSize, setCellSize] = useState(30); // Update this value in Controls/index.js as well.\n    const [relations, setRelations] = useState([]);\n\n    const [openLinalg, setOpenLinalg] = useState(false);\n\n\n    // Change N, and re-initialize all parameters appropriately\n    function setN(N) {\n        const base = isqrt(N);\n\n        setP(0);\n        setBase(base);\n        rawSetN(N);\n\n        setGLUniform('highlightMod', 0);\n        setTimeout(() => initSieve(N, base), 0);\n    }\n\n\n    // Perform one sieving step.\n    // If suppressRender = true, then the sieve is not rendered. (Speeds up auto-sieving.)\n    function sieve(suppressRender) {\n        const p = primeList[pIdx];\n        if (factorBase.includes(p)) {return;}\n        const [t1, t2] = getSieve(N, p, base);\n\n        const readoutInterval = (cellSize < 5) ? 100 : 10;\n        const shouldRender = !suppressRender | (pIdx % readoutInterval === 0);\n\n        // Perform sieving step\n        if (t1 !== null) {\n            updateSieve(t1, p);\n            if (t1 !== t2) {\n                updateSieve(t2, p);\n            }\n            factorBase.push(p);\n        }\n\n        // Update highlight on desktop if not auto-sieving\n        if (shouldRender) {\n            setRelations(getRelations());\n            if (window.innerWidth > 600) {\n                highlightResidues(primeList[pIdx+1]);\n            }\n        }\n        setP(pIdx+1);\n    }\n\n\n    useEffect(() => initGL(), []);\n    useEffect(() => {\n        width = Math.ceil(4*window.innerWidth/cellSize);\n        height = Math.ceil(4*window.innerHeight/cellSize);\n        handleResize(width, height);\n        setN(N);\n    }, [cellSize, N]);\n    useEffect(() => setN(bigInt(853972440679)), []); // Update this value in Controls/index.js as well.\n    useEffect(() => {\n        setRelations([]);\n        factorBase = [-1];\n    }, [base]);\n\n\n    // Prevent zoom on mobile\n    const preventDefault = (e) => e.preventDefault();\n    function registerListener() {\n        document.addEventListener('gesturestart', preventDefault, {passive: false});\n        document.addEventListener('touchmove', preventDefault, {passive: false});\n    }\n\n\n    // Highlight cells which will be sieved in the next step\n    function highlightResidues(p) {\n        const [t1, t2] = getSieve(N, p, base);\n        if (t1 === null) {\n            highlightOff();\n            return;\n       }\n        setGLUniform('highlight', t1);\n        setGLUniform('highlightAlt', t2);\n        setGLUniform('highlightMod', p);\n        renderSieve();\n    }\n\n    return <>\n        <Graphics\n            width={width}\n            height={height}\n            base={base}\n            N={N}\n            setHighlighted={setHighlighted}\n        />\n        <Controls\n            state={{N, p: primeList[pIdx], cellSize}}\n            setN={setN}\n            sieve={sieve}\n            setHighlight={(v) => v ? highlightResidues(primeList[pIdx]) : highlightOff()}\n            setCellSize={setCellSize}\n            linalgOpen={openLinalg}\n        />\n        <Infobar\n            relations={relations}\n            factorBase={factorBase}\n            base={base}\n            shift={Math.round(width*height/2)} \n            onFinish={() => setOpenLinalg(true)}\n        />\n        <HelpText onClose={registerListener}/>\n        <Linalg\n            open={openLinalg}\n            handleClose={() => setOpenLinalg(false)}\n            relations={relations}\n            factorBase={factorBase}\n            N={N}\n            base={base}\n        />\n    </>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}